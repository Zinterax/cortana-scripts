# namap-test script

debug(7);

global('$nmapconsole $currentTarget @scanQueue $scanning $botName $nmapParam $pause $pauseLater $pauseTime $queueFile $initialQueueFile');

elog("Initializing ScanBot...");

on ready {
initialize();
}

sub initialize {

local('@conf $confPath $handle @iQueue');

$confPath = script_resource("scanbot.conf");
$nmapconsole = console();
$pause = false;
$pauseTime = 0;
$queueFile = script_resource("queueFile.txt");

if (-exists $confPath && -canread $confPath) 
{
	elog("Reading scanbot.conf...");
	$handle = openf($confPath);
	@conf = readAll($handle);
	closef($handle);

}

else
{
	elog("Can't find \.\/scanbot.conf make sure you have it!");
}

if (size(@conf) > 0)
{
	local('@option @confOption $option');
	elog("Read scanbot.conf successfully");
	foreach $option (@conf) {
		$option = substr($option,(lindexOf($option, "=") + 1));
		add(@confOption, $option, size(@confOption));
	} 
	($botName, $nmapParam, $initialQueueFile) = @confOption;
}

$initialQueueFile = script_resource($initialQueueFile);

if (-exists $queueFile) {
	elog("Queue File found!");
	elog("Use \"!bot importqf\" to reload your previous queue (will remove after importing)");
}

if (-exists $initialQueueFile) {
	elog("Initial Queue file found!");
	elog("Use \"!bot importiq\" to import these addresses");
}

$scanning = false;
if (size(@scanQueue) > 0)
{
	$currentTarget = @scanQueue[0];
	elog("Starting scanning...");
	scan($currentTarget);
}
else {
	elog("Scanning Queue is empty, waiting for targets...");
}
}

sub scan {
	local('$target');
	$scanning = true;
	$target = $1;
	$currentTarget = $target;
	elog("Attempting nmap scan of $target");
	cmd($nmapconsole, "db_nmap $nmapParam $target");
}

sub custom_scan {
	local('$parms');
        $parms = $1;
	$currentTarget = $parms;
        elog("Attempting nmap scan with: $parms");
        cmd($nmapconsole, "db_nmap $parms");
	$scanning = true;
}

sub import_initial_queue {
	local('$path');
	$path = $initialQueueFile;
	queue_from_file($path);
	elog("IQF: $path");
}

sub queue_scan {
	local('$target $lastChar');
	$lastChar = charAt($1, -1);
	if ($lastChar eq " ")
	{
		$target = left($1, -1);
	}
	else
	{
		$target = $1
	}
	if($target in @scanQueue)
	{
		elog("\"$target\" already in queue, skipping");
	}
	else {
	elog("Placing \"$target\" in queue");
	add(@scanQueue, $target, size(@scanQueue));
	}
}

sub queue_custom_scan {
	local('parms');
	$parms = "!C!;" . $1;
	elog("Placing Custom scan $1 in queue");
	add(@scanQueue, $parms, size(@scanQueue));
	
}

sub pause_scan {
	local('$arg $lastChar @toggle $time $var');
        $lastChar = charAt($1, -1);
        if ($lastChar eq " ")
        {
                $arg = left($1, -1);
        }
        else
        {
                $arg = $1
        }
	$arg = lc($arg);
	@toggle = split(" ", $arg);
	
	if (@toggle[0] eq "on") {
		$pause = true;
		elog("Scan Queue Paused after completing scanning.");
	}
	else if (@toggle[0] eq "off") {
		$pause = false;
		elog("Scan Queue resumed from paused state");
	}
	else if (@toggle[0] eq "at" ) {
		$pauseLater = true;
		remove(@toggle, "at");
		foreach $var (@toggle) {
		$time .= ($var . " ");
		}
		$time = left($time, -1);
		$pauseTime = parseDate('MM/dd/y HH:mm', $time);
		$pauseLater = true;
		elog("Pause scheduled for $time");
	}
	else {
		elog("Error: Use pause \{on|off|\{at\} mm/dd/yy HH:mm\} to toggle pausing of scan queue");
	}
}

sub write_queue_to_file {
	local('$job $handle');
	if (size(@scanQueue) > 0) {
        	elog("Dumping queue to queueFile.txt");
		if (!-exists "$queueFile")
		{
		createNewFile($queueFile);
		}
		$handle = openf(">$queueFile");
        	foreach $job (@scanQueue) {
        	println($handle, $job);
        	}
		closef($handle);
	}
	else {
		elog("Scan Queue is empty, nothing to save!");
	}
}
sub read_queue_from_file {
	queue_from_file($queueFile);
	deleteFile("$queueFile");
}


on heartbeat_5s
{
	local('$now')
	$now = ticks();
	if ($now >= $pauseTime && $pause != true && $pauseLater == true)
	{
		$pause = true;
		elog("Reached scheduled pause time. Pausing after this scan completes");
		$pauseTime = 0;
		$pauseLater = false;
	}
	
}

sub queue_from_file {
	local('$address @iQueue $handle $path $lastChar');
	$lastChar = charAt($1, -1);
        if ($lastChar eq " ")
        {
                $path = left($1, -1);
        }
        else
        {
                $path = $1
        }
	if (-exists "$path")
	{
        	elog("Found: $path");
        	if(-canread "$path")
        	{
                	elog("Reading $path")
                	$handle = openf("$path");
                	@iQueue = readAll($handle);
                	closef($handle);
                	foreach $address (@iQueue)
                	{
                        	queue_scan("$address");
                	}
        	}
	}
        else
        {
                elog("Failed to read $path");
        }

}

sub show_queue {
	local('$queue $job');
	$queue = "\r\n\r\nCurrent Scanning Queue: \r\n";
	foreach $job (@scanQueue) {
	$queue .= "$job " . "\r\n";
	}
	elog("$queue");
}

sub clear_queue {
	clear(@scanQueue);
}

sub drop_from_queue {
	$path = $1;
        $path = left($path, -1);
	elog("\" $+ $path $+ \"");
	remove(@scanQueue, $path);
}

sub full_stop {
	write_queue_to_file();
	clear_queue();
	kill_nmap();
}

sub kill_nmap {
	elog("Killing nmap...");
        spawn({
                on console {
                        local('$ps @found $pid $test $var @temp')
                        @temp = split('\s+',$3);
                        $pid = @temp[8];
                        cmd_async("/bin/kill $pid");
                        quit();

                }
                cmd_async("ps -waux | grep nmap");
        });
	elog("Dead.");
}

sub SHUT_DOWN_EVERYTHING {
	elog("Shutting Down...");
	if (size(@scanQueue) > 0) { 
	elog("Queue not empty, dumping to disk"); 
	write_queue_to_file(); 
	}
	if ($scanning) { 
	kill_nmap(); 
	}
	clear_queue();
	elog("Signing Off..");
	quit();
}

on heartbeat_15s {
	if (size(@scanQueue) > 0 && $scanning == false && $pause == false)
	{
		$scanning = true;
		$currentTarget = @scanQueue[0];
		scan($currentTarget);
	}

	else {}
}

on heartbeat_60m {
	if (size(@scanQueue) == 0)
	{
		elog("Scanning Queue is empty, waiting for jobs...");
	}
}

on console_db_nmap {
        local('$temp @test');
	@test = split("\n", $3);
        if("*Nmap: 'QUITTING!'*" iswm @test[2]){
                elog("NMAP FAILED :\(")
                elog("ERROR:" . "\n\r" . "$3");
                remove(@scanQueue, $currentTarget);
                $scanning = false;
                elog("Removed $currentTarget from the queue");
        }

        else if ("*Nmap: 'WARNING:*" iswm @test[2] || "*Nmap: 'WARNING:*" iswm @test[3]){
                elog("WARNING:" . "\n\r" . "$3");
		remove(@scanQueue, $currentTarget);
                $scanning = false;
                elog("Removed $currentTarget from the queue");

	}
        else {
		if (!$pause) {
			elog("nmap scan of $currentTarget completed, moving to next scan in queue...");
		}
		else {
			elog("nmap scan of $currentTarget completed, Queue is paused, waiting to resume...");
		}
                $temp = shift(@scanQueue);
                if (size(@scanQueue) == 0) {
                        elog("Scanning Queue is empty, waiting for targets...");
			$currentTarget = "";
                }
                $scanning = false;

	}
}

on event_read {
	local('$reduced $command $var @request $args $event @test $tester $bot $help @message');
	@message = parse_event($1);
	println(@message[2]);
	$args = "";
	$event = $1;
	$event = lc($event);
	@test = split(" ", $event);
	$tester = @test[2];
	if($tester eq lc($botName)){ 
		$bot = true; 
	}
	if ($bot != true && (strlen($event) > 2)) {
		$reduced = substr($event,(lindexOf($event, ">") + 2));
	}
	else {
		$reduced = "";
	}
	@request = split(' ', $reduced);
	
	if (@request[0] eq "!bot") {
		$command = @request[1];
	if (@request[2] eq "!now") {
		remove(@request, "!now");
	}
		remove(@request, "!bot", $command);
		foreach $var (@request){
		$args .= ($var . " ");
	}
	}
	else{}
	
	#COMMAND SWITCH SECTION
	if ($command eq "scan") {
		queue_scan($args);
	}

	if ($command eq "custom_scan") {
	#	queue_custom_scan($args);
	}

	if ($command eq "showqueue" || $command eq "showq") {
		show_queue();
	}
	
	if ($command eq "help") {
	#	$help .= "!bot ";
		$help = "\r\n\r\nScanner Bot Help:\r\n";
		$help .= "Commands: \r\n";
		$help .= "!bot scan {target} - places \$target into the scanning queue\r\n";
		$help .= "!bot importfile \{\"\/path\/to\/file\}\" - Imports and queues the *LOCAL* file, put it on a share accessable by the server hosting the ScanBot\r\n";
		$help .= "!bot importqf : attempts to import the saved queue file. Useful for resuming after shutting down";
		$help .= "!bot importif : attempts to import from the \"initial queue file\" defined in \"scanbot.conf\"";
	#	$help .= "custom_scan \[!now\] \$parameters - places a custom scan with $parameters into the scanning queue\r\n";
		$help .= "!bot showq - Dumps the current scanning queue to the event log\r\n";
		$help .= "!bot drop \{target} - Drops the given \$target from the queue\r\n";
		$help .= "!bot clearq - Completely empties the queue \r\n";
		$help .= "!bot pause \{on|off|\{at\} HH:mm:yy\} : toggles pausing after the current scan completes - THIS DOES NOT PAUSE THE CURRENT SCAN!\r\n";
		$help .= "!bot resume : alias for \"pause off\"";
		$help .= "!bot fullstop : This is the KILL button. Press it in emergencies\r\n";
		$help .= "!bot restart : This re-initializes the bot, it will re-add targets in your defined initial queue file if present";
		$help .= "!bot shutdown : This shuts down ScanBot. Will cancel any running scans, and if there is a Queue, dump it to disk";
		elog($help);
	}

	if ($command eq "filequeue" || $command eq "importfile") {
		queue_from_file($args);
		
	}

	if ($command eq "clearqueue" || $command eq "clearq") {
		elog("Clearing the Scan Queue");
		clear_queue();
	}

	if ($command eq "drop") {
		elog("dropping $args from Scan Queue");
		drop_from_queue($args);
	}

	if ($command eq "fullstop") {
		elog("Killing scans and clearing queue!");
		full_stop();
		elog("Everything dead, issue !bot restart to recover");
	}

	if ($command eq "restart") {
		elog("Killing scans, saving queue and restarting...");
		write_queue_to_file();	
		full_stop();
		initialize();
	}

	if ($command eq "pause") {
		pause_scan($args);
	}

	if ($command eq "resume") {
		pause_scan("off");
	}

	if ($command eq "test") {
	local('$remotePath $localPath')
	$localPath = prompt_open_file("test");
	}

	if ($command eq "dumpq") {
		write_queue_to_file();
	}

	if ($command eq "shutdown") {
		#A MAN IN BRAZIL IS COUGHING
		SHUT_DOWN_EVERYTHING();
	}

	if ($command eq "importqf") {
		read_queue_from_file();
	}
	
	if ($command eq "importiq") {
		import_initial_queue(); 	
	}

}
